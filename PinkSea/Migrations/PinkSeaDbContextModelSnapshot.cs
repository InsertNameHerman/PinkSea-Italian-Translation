// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PinkSea.Database;

#nullable disable

namespace PinkSea.Migrations
{
    [DbContext(typeof(PinkSeaDbContext))]
    partial class PinkSeaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("PinkSea.Database.Models.OAuthStateModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OAuthStates");
                });

            modelBuilder.Entity("PinkSea.Database.Models.OekakiModel", b =>
                {
                    b.Property<string>("Tid")
                        .HasColumnType("TEXT");

                    b.Property<string>("AltText")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorDid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BlobCid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("IndexedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Tid");

                    b.HasIndex("AuthorDid");

                    b.ToTable("Oekaki");
                });

            modelBuilder.Entity("PinkSea.Database.Models.TagModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PinkSea.Database.Models.TagOekakiRelationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("OekakiId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OekakiId");

                    b.HasIndex("TagId");

                    b.ToTable("TagOekakiRelations");
                });

            modelBuilder.Entity("PinkSea.Database.Models.UserModel", b =>
                {
                    b.Property<string>("Did")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Did");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PinkSea.Database.Models.OekakiModel", b =>
                {
                    b.HasOne("PinkSea.Database.Models.UserModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorDid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PinkSea.Database.Models.TagOekakiRelationModel", b =>
                {
                    b.HasOne("PinkSea.Database.Models.OekakiModel", "Oekaki")
                        .WithMany()
                        .HasForeignKey("OekakiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PinkSea.Database.Models.TagModel", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oekaki");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
