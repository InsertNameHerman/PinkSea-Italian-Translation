@{
    ViewData["Title"] = "Home Page";
}

<style>
	.background {
		width: auto;
		border: 2px solid #FFB6C1;
		display: inline-block;
	}
</style>

@if (User.Identity!.IsAuthenticated)
{
	<div id="bakagakiContainer">
		<div class="background">
			<canvas id="bakagaki" width="480" height="300"></canvas>
		</div>
		<div>
			<input type="color" id="penColor" name="body" value="#00ddc0"/>
			<input type="range" id="penSize" min="1" max="30" value="5"/> <span id="penSizeDisplay">5</span>
			<button onclick="uploadImage()">Upload!</button>
		</div>
	</div>
}
else
{
	<form action="/oauth/begin-login">
		<input name="handle" />
		<input type="submit" value="Login with ATProto" />
	</form>
}
<hr/>
<div id="posts" style="display: inline-block; width: 100%;">
	
</div>

<script>
	const posts = document.getElementById("posts");
	fetch("/api/get-all")
    .then(res => res.json())
    .then(j => {
		for (const obj of j) {
			const container = document.createElement("div");
			container.style.display = "inline-block";
			
			const image = document.createElement("img");
			const description = document.createElement("div");
			description.innerText = "By @@" + obj.authorHandle + " at: " + obj.creationTime;
			image.src = obj.imageLink;
			container.appendChild(image);
			container.appendChild(description);
			posts.appendChild(container);
			container.addEventListener("click", ev => {
				atUrl = obj.atProtoLink;
			});
		}
	})
    .catch(res => console.log(res));
</script>

<script>
	const canvas = document.getElementById("bakagaki");
	const penSize = document.getElementById("penSize");
	const penColor = document.getElementById("penColor");
	const penSizeDisplay = document.getElementById("penSizeDisplay");
	let atUrl = null;

	const context = canvas.getContext("2d");
	context.imageSmoothingEnabled = false;
	context.lineCap = "round";
	context.lineWidth = penSize.value;
	penSizeDisplay.innerText = penSize.value;
	context.strokeStyle = penColor.value
	context.lineJoin = "round";

	context.fillStyle = "white";
	context.fillRect(0, 0, canvas.width, canvas.height);

	penSize.addEventListener("input", evt => {
		context.lineWidth = evt.target.value;
		penSizeDisplay.innerText = evt.target.value;
	});

	penColor.addEventListener("input", evt => {
		context.strokeStyle = evt.target.value;
	});


	var isDrawing = false;
	var lastX, lastY;

	canvas.addEventListener('mousedown', evt => {
		isDrawing = true;
	});

	canvas.addEventListener('mouseup', evt => {
		isDrawing = false;
		lastX = undefined;
		lastY = undefined;
	});

	canvas.addEventListener('mousemove', evt => {
		if (!isDrawing)
			return;

		let canvasX = canvas.offsetLeft + canvas.clientLeft;
		let canvasY = canvas.offsetTop + canvas.clientTop;

		let x = evt.pageX - canvasX;
		let y = evt.pageY - canvasY;

		if (lastX != undefined && lastY != undefined) {
			context.beginPath();
			context.moveTo(lastX, lastY);
			context.lineTo(x, y);
			context.stroke();
		}
		
		lastX = x;
		lastY = y;
	})
	
	const uploadImage = () => {
		const body = {
			data: canvas.toDataURL('image/png'),
			parent: atUrl
		};
		
		fetch("/api/upload-oekaki",
		{
			method: 'POST',
			body: JSON.stringify(body),
			headers: {
            	"Content-Type": "application/json",
            },
		})
		.then(res => location.reload())
		.catch(res => console.log(res));
	};
</script>